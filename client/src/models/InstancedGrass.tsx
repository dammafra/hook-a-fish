/*
  Tuft of grass 
  by Poly by Google [CC-BY] (https://creativecommons.org/licenses/by/3.0/) 
  via Poly Pizza (https://poly.pizza/m/3tyh15Fbmsx)

  Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { Instance, Instances, useGLTF } from '@react-three/drei'
import { useMemo } from 'react'
import { BufferGeometry, Mesh } from 'three'
import { mergeGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js'
import type { Position } from '../utils/position'
import type { Rotation } from '../utils/rotation'

export interface GrassInstanceProps {
  position: Position
  rotation: Rotation
  scale: number | [number, number, number]
}

export interface InstancedGrassProps {
  count?: number
  instances: GrassInstanceProps[]
}

export default function InstancedGrass({ count = 10, instances }: InstancedGrassProps) {
  const { scene, materials } = useGLTF('./models/grass.glb')

  const geometry = useMemo(() => {
    const geometries: BufferGeometry[] = []
    scene.traverse(child => {
      if (child instanceof Mesh) {
        const g = child.geometry.clone()
        g.applyMatrix4(child.matrixWorld)
        geometries.push(g)
      }
    })
    return mergeGeometries(geometries).center()
  }, [scene])

  return (
    <Instances geometry={geometry} material={materials._crayfishdiffuse} limit={count}>
      {instances.map((props, i) => (
        // @ts-expect-error Quaternion is a valid rotation type
        <Instance key={`grass-${i}`} {...props} />
      ))}
    </Instances>
  )
}

useGLTF.preload('./models/grass.glb')
