/*
  Fishing Pole
  by Shawn Westphal [CC-BY] (https://creativecommons.org/licenses/by/3.0/)
  via Poly Pizza (https://poly.pizza/m/eyuCxAqI9er)

  Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useGLTF } from '@react-three/drei'
import type { ObjectMap } from '@react-three/fiber'
import { useEffect, useState, type JSX } from 'react'
import type { ColorRepresentation, Material, Mesh, MeshStandardMaterial } from 'three'
import type { GLTF } from 'three-stdlib'

type GLTFResult = GLTF &
  ObjectMap & {
    nodes: {
      ['Group#5-Entity38825']: Mesh
      ['Group#7-Entity38827']: Mesh
    }
    materials: {
      FrontColor: MeshStandardMaterial
      ['[0038_Orange]']: MeshStandardMaterial
    }
  }

type FishingPoleProps = JSX.IntrinsicElements['group'] & {
  colorA?: ColorRepresentation
  colorB?: ColorRepresentation
}

export default function FishingPole({
  colorA = 'sienna',
  colorB = 'goldenrod',
  ...props
}: FishingPoleProps) {
  const { nodes, materials } = useGLTF('./models/fishing-pole.glb') as GLTFResult
  const [materialA, setMaterialA] = useState<Material>()
  const [materialB, setMaterialB] = useState<Material>()

  useEffect(() => {
    const materialA = materials['[0038_Orange]'].clone()
    materialA.color.set(colorA)

    const materialB = materials.FrontColor.clone()
    materialB.color.set(colorB)
    materialB.metalness = 0.8
    materialB.roughness = 0.2

    setMaterialA(materialA)
    setMaterialB(materialB)
  }, [materials, colorA, colorB])

  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes['Group#5-Entity38825'].geometry} material={materialA} />
      <mesh castShadow geometry={nodes['Group#7-Entity38827'].geometry} material={materialB} />
    </group>
  )
}

useGLTF.preload('./models/fishing-pole.glb')
