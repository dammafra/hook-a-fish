/*
  Tree
  by Quaternius (https://poly.pizza/m/i4QMw4L64D)
  
  Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useGLTF } from '@react-three/drei'
import type { ObjectMap } from '@react-three/fiber'
import { useEffect, type JSX } from 'react'
import type { Mesh, MeshStandardMaterial } from 'three'
import type { GLTF } from 'three-stdlib'

type GLTFResult = GLTF &
  ObjectMap & {
    nodes: {
      Tree_3_1: Mesh
      Tree_3_2: Mesh
    }
    materials: {
      Tree_Green: MeshStandardMaterial
      Tree_Wood: MeshStandardMaterial
    }
  }

export default function Tree(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('./models/tree.glb') as GLTFResult

  useEffect(() => {
    materials.Tree_Green.metalness = 0
    materials.Tree_Green.roughness = 1

    materials.Tree_Wood.metalness = 0
    materials.Tree_Wood.roughness = 1
  }, [materials])

  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={51.843}>
        <mesh castShadow geometry={nodes.Tree_3_1.geometry} material={materials.Tree_Green} />
        <mesh castShadow geometry={nodes.Tree_3_2.geometry} material={materials.Tree_Wood} />
      </group>
    </group>
  )
}

useGLTF.preload('./models/tree.glb')
